



TBD                                                         Y. Yiakoumis
Internet-Draft                                      Selfie Networks, Inc
Intended status: Informational                            April 13, 2020
Expires: October 15, 2020


                             Network Tokens
                   draft-yiakoumis-network-tokens-00

Abstract

   Network Tokens is a method to securely transfer claims between
   endpoints and a network to drive or assist network policy.  They are
   inserted by endpoints in existing protocols, interpreted by trusted
   networks, and may be signed or encrypted to meet security and privacy
   requirements.  Network Tokens can be represented as JSON Web Tokens,
   CBOR Web Tokens, or other available formats.  They can be used to
   expose and access a variety of network services such as firewall
   whitelists, QoS, and zero-rating services.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 15, 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must



Yiakoumis               Expires October 15, 2020                [Page 1]

Internet-Draft                networktokens                   April 2020


   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Motivation  . . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Network Token Overview  . . . . . . . . . . . . . . . . . . .   3
   5.  Contents and Representation . . . . . . . . . . . . . . . . .   4
     5.1.  Network Token Common fields . . . . . . . . . . . . . . .   5
       5.1.1.  'iss' (Issuer) field  . . . . . . . . . . . . . . . .   5
       5.1.2.  "sub" (Subject) field . . . . . . . . . . . . . . . .   5
       5.1.3.  "exp" (Expiration Time) field . . . . . . . . . . . .   5
       5.1.4.  "iat" (Issued At) field . . . . . . . . . . . . . . .   6
       5.1.5.  "nti" field (Network Token ID) field  . . . . . . . .   6
       5.1.6.  "bip" field (Bound IP) field  . . . . . . . . . . . .   6
     5.2.  Network Token Format  . . . . . . . . . . . . . . . . . .   6
   6.  Example Network Tokens  . . . . . . . . . . . . . . . . . . .   7
     6.1.  Firewall Whitelist Token  . . . . . . . . . . . . . . . .   7
     6.2.  Low-latency Token . . . . . . . . . . . . . . . . . . . .   8
   7.  Network Tokens and Encapsulating protocols  . . . . . . . . .   9
     7.1.  Network Tokens as a TLS Extension . . . . . . . . . . . .  10
     7.2.  Network Tokens as a STUN Attribute  . . . . . . . . . . .  11
     7.3.  Network Tokens as an IPv6 Hop-by-Hop Extension Header . .  13
   8.  Implementation Considerations . . . . . . . . . . . . . . . .  14
     8.1.  Network Token contents  . . . . . . . . . . . . . . . . .  14
     8.2.  Network Token protocol  . . . . . . . . . . . . . . . . .  15
     8.3.  Network Token granularity . . . . . . . . . . . . . . . .  15
       8.3.1.  Per-packet granularity  . . . . . . . . . . . . . . .  16
       8.3.2.  Per-flow granularity  . . . . . . . . . . . . . . . .  16
     8.4.  Token to DiffServ mapping and reflection  . . . . . . . .  16
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  17
   10. IANA Considerations { #iana } . . . . . . . . . . . . . . . .  17
     10.1.  Token Descriptor ID Registry . . . . . . . . . . . . . .  17
       10.1.1.  Initial Registry Contents  . . . . . . . . . . . . .  18
     10.2.  IPv6 Hop-By-Hop options registration . . . . . . . . . .  18
     10.3.  TLS ExtensionType Registry . . . . . . . . . . . . . . .  18
     10.4.  STUN Attributes Registry . . . . . . . . . . . . . . . .  18
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  19
     11.1.  Normative References . . . . . . . . . . . . . . . . . .  19
     11.2.  Informative References . . . . . . . . . . . . . . . . .  20
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  20







Yiakoumis               Expires October 15, 2020                [Page 2]

Internet-Draft                networktokens                   April 2020


1.  Introduction

   This specifications motivates and describes network tokens, a method
   to securely transfer clams between endpoints and a network to drive
   and/or assiste network policy.

   The JSON Web Token (JWT) [RFC7519] and CBOR Web Token (CWT) [RFC8392]
   are standardized security token formats that have found use in OAuth
   2.0, OpenID Connect, and Internet of Things deployments, among other
   applications.  JWT and CWT use JSON Object Signature and Encryption
   (JOSE) and COBR Object Signature and Encryption (COSE) technologies
   to secure the contents of tokens, which essentially are a set of
   claims represented in JSON or CBOR.

   This specification motivates and describes the use of tokens - named
   network tokens - as a method to securely transfer claims between
   endpoints and a network to drive and/or assist network policy.
   Network tokens are inserted by endpoints in existing protocols,
   interpreted by trusted networks, and may be signed or encrypted to
   meet a variety of security and privacy requirements.  They can be
   encoded as JSON Web Tokens, CBOR Web Tokens, or other available
   formats.  Network tokens can be used to expose and access a variety
   of network services such as firewall whitelists, QoS, and zero-rating
   services.

2.  Terminology

   o  End Users: We use the term "end user" to broadly characterize a
      role that has control over an endpoint.  This can be an individual
      user, an enterprise, an Operating System, or an application.

3.  Motivation

   o  Discuss existing alternatives through DiffServ and DPI

   o  Requirements from different perspectives (network operator,
      regulator, app developer, user)

4.  Network Token Overview

   A network token is a small piece of data that end users attach to
   their packets to access a whitelist-based network service.  As
   packets flow through the network, intermediate nodes detect tokens,
   interpret them, and apply the desired service to the packets that
   carry them (and possibly to all other packets from the same flow).

   Network tokens are always interpreted by a network operator.  Token
   generation depends on the use case and trust relationship between the



Yiakoumis               Expires October 15, 2020                [Page 3]

Internet-Draft                networktokens                   April 2020


   different entities involved.  For example, tokens might be generated
   by the network who distributes it to eligible end-users on-demand.
   Alternatively, the operator can enable users to generate multiple
   tokens themselves, or application providers might generate tokens and
   tell operators how to interpret them.

   To prevent unauthorized third-parties from replaying, spoofing, or
   interpreting a token, tokens may be signed and encrypted, in ways
   described below.  Network tokens can use custom or existing
   representation formats, like JWT [RFC7515] or CWT [RFC7516].
   Section XX discusses example tokens for specific usecases.

   Network tokens do not dictate a dedicated header or protocol to be
   inserted.  Instead, they are incorporated as options and extensions
   into a variety of existing protocols.  For example, network tokens
   can be carried as TLS Client and Server Hello extensions during a TLS
   handshake, as IPv6 destination or Hop by Hop Options, or as
   attributes during a STUN-enabled flow setup.  Network tokens are
   largely opaque to the protocols that carry them.  Section XX
   discusses implementation details for inserting tokens, and Section XX
   lists recommended IANA registry changes for TLS, STUN, and IPv6.

   The distribution of tokens is out of scope for this document.

5.  Contents and Representation

   The contents of a network token fulfil three main goals:

   o  communicate the desired information between an endpoint and the
      network (e.g., the name of an application, or a user key to
      request low-latency services)

   o  prevent unauthorized parties from replaying or using these tokens
      to inadvertently access network services (e.g., through the use of
      timestamps, expiration time, nonces)

   o  digitally sign and/or encrypt a token to meet privacy and security
      requirements

   Network operators can define their own structure to represent tokens,
   for example through pre-defined byte sequences or a list of TLV-
   encoded fields.  Alternatively, tokens can use JOSE and COSE
   technologies for representation, as they already provide a framework
   to securely communicate information between different entities.  The
   actual representation and contents of a token should take into
   consideration the capabilities of the network to process them (i.e,
   what cryptographic functionality can the network support), length in




Yiakoumis               Expires October 15, 2020                [Page 4]

Internet-Draft                networktokens                   April 2020


   terms of header space, and requirements for integrity protection,
   privacy preservation, and attack scenarios.

   Examples in this document will use JWT to represent tokens, as they
   are well understood by the community and easily read by humans.
   Translation to a different representation format should be straight
   forward.

5.1.  Network Token Common fields

   Network tokens can have arbitrary fields (or claims).  The fields
   defined below, while not mandatory, provide a starting point for a
   set of useful, interoperable fields.  Network services using network
   tokens should define which specific fields they use and whether they
   are required or optional.  Several of the fields listed below are
   already registered as part of JWT and CWT specifications, while
   others are specific for network tokens.

5.1.1.  'iss' (Issuer) field

   The "iss" (issuer) field identifies the principal that issued the
   token.  For example, the issuer might be the name of the network
   operator that offers the service of interest.  The processing of this
   claim is generally application specific.

5.1.2.  "sub" (Subject) field

   The "sub" (subject) field identifies the principal that is the
   subject of the token.  This could be a subscriber id, or the name of
   an application.  The subject value MUST either be scoped to be
   locally unique in the context of the issuer or be globally unique.
   The processing of this claim is generally application specific.

5.1.3.  "exp" (Expiration Time) field

   The "exp" (expiration time) field identifies the expiration time on
   or after which the token MUST NOT be accepted for processing.  The
   processing of the "exp" field requires that the current date/time
   MUST be before the expiration date/time listed in the "exp" claim.
   Implementers MAY provide for some small leeway, usually no more than
   a few minutes, to account for clock skew.  The "exp" field can be
   used to reduce the probability of replay attacks, restrict service
   access to a certain period, or to force users to refresh
   authentication credentials.







Yiakoumis               Expires October 15, 2020                [Page 5]

Internet-Draft                networktokens                   April 2020


5.1.4.  "iat" (Issued At) field

   The "iat" (issued at) field identifies the time at which the token
   was issued or generated.  This field can be used to determine the age
   of the token, and can be used along or instead of the "exp" field.

5.1.5.  "nti" field (Network Token ID) field

   The "nti" field provides a nonce-like value for the token.  The
   identifier value MUST be assigned in a manner that ensures that there
   is a negligible probability that the same value will be accidentally
   assigned to a different data object; if the application uses multiple
   issuers, collisions MUST be prevented among values produced by
   different issuers as well.  The "nti" field can be used to prevent
   the token from being replayed.

5.1.6.  "bip" field (Bound IP) field

   The "bip" (Bound IP) field bounds the use of the token to a specific
   IP address.  This can prevent third parties from reusing the token in
   a different context.

5.2.  Network Token Format

   A token consists of the following fields (Figure X):

   o  Reflect Type (4-bits): Indicates reflection properties for the
      token.

      *  0x0: Token is inserted by the origin of this flow.  No
         reflection needed.

      *  0x1: Token is inserted by the origin of this flow.  Reflect at
         receiver.

      *  0x2: Reflected token.

      *  0x3-0xf: Reserved

   o  Token Descriptor ID (28-bits): An ID that helps the network decide
      whether and how to interpret tokens.  Descriptor IDs are
      registered in the "Token Descriptor ID" registry (MSB = 0) or
      private (MSB equals 1).  For private descriptor IDs, the definer
      of the value needs to take reasonable precautions to make sure
      they are in control of the part of the namespace they use (e.g.,
      by using a OUI prefix).  A token descriptor might just indicate
      that the token payload is a JWT, or point to a structure that
      holds keys and other information to interpret a token.



Yiakoumis               Expires October 15, 2020                [Page 6]

Internet-Draft                networktokens                   April 2020


   o  Token Payload: Depending on the application, the token payload
      might be a self-contained JWT or CWT (as plaintext, signed, or
      encrypted), a set of TLV-encoded values, or has its own custom
      format.

   The length of the token is arbitrary, but must follow the limitations
   imposed by the protocol it is encapsulated.  For example, if the
   token is carried as an IPv6 hop-by-hop option, the total length of
   the token cannot exceed 256 bytes.

                         0         1         2        3
                         0123456789012345678901245678901
                        +-------------------------------+
                        |      token descriptor id      |
                        +-------------------------------+
                        |                               |
                        |                               |
                        |         token payload         |
                        |                               |
                        |                               |
                        +-------------------------------+


6.  Example Network Tokens

   This section discusses example network tokens and how they can serve
   specific use cases.

6.1.  Firewall Whitelist Token

   A firewall token can be used to whitelist traffic from trusted
   applications.

   The following example verifies that a network flow is coming from
   "The Godfather App".

   The token payload is encoded as a JWT, and encapsulated as a TLS
   Extension attached in a Server Hello Message.

   The Reflect Type is 0x00 (i.e., this is the origin flow and peers
   should not reflect it), with the expectation that firewalls can setup
   appropriate state for the reverse flow as well.  The Token Descriptor
   ID is 0x03, which might represent a registered value for firewall
   tokens.

   The JWT encodes the following object.

   The header of the JWT has the following fields:



Yiakoumis               Expires October 15, 2020                [Page 7]

Internet-Draft                networktokens                   April 2020


   {"alg":"ES256", "kid":"N6fr1MDrEuu1eXRkFbcpX4WY62SKN7TKrhYf9PfJEd8"}


   The token is signed using the Elliptic Curve Digital Signature
   Algorithm, and the public key can be looked-up in a pre-defined
   database using the "kid" thumbprint.

   The JWT payload has the following fields:

{"sub":"The Godfather App", "iat":1588116732, "exp":1588117732,"bip":"140.54.35.194"}

   The token is created by the app provider.  It states that this flow
   originates from "The Godfather App", along with the time that it was
   created and when it expires.  The token is signed with the app
   provider's public key, and any network can verify this through the
   attached signature.  The token is also bound to a specific IP
   address, and therefore cannot be reused in a different context.  For
   example, the application provider could configure all exit gateways
   to attach a token for all outgoing flows.

6.2.  Low-latency Token

   A low-latency token is used to access a custom QoS SLA from a mobile
   operator tailored for video communications.  This is an application-
   agnostic service, i.e., users can use it for any traffic they want.

   The token payload is encoded as a JWT, and can be inserted to STUN
   (as STUN attributes) or IPv6 packets (as IPv6 Hop-by-Hop extension
   header).

   The Reflect Type is 0x1, i.e., peers should reflect the token to
   setup state for the reverse flow.  The Token Descriptor ID is 0x01,
   stating that the token payload is a JWT object.

   The header of the JWT has the following fields:

   {'alg':'dir','enc':"A256CBC-HS512", 'app_id':14098715987234}

   The token is generated by the operator, and signed with the AES-256
   algorith, using a customer-specific symmetric key.  The app_id points
   is a local identifier, that the operator has associated with its own
   services.

   The payload of the token has the following fields, requesting for
   low-latency treatment, and bounding the start and end time of the
   token.  It also has a unique identifier to allow revocation.

 {'srv':'lowlatency', 'nti': 5871234, iat':1588116732, 'exp':1588203132}



Yiakoumis               Expires October 15, 2020                [Page 8]

Internet-Draft                networktokens                   April 2020


   Each token is valid for 24 hours.  As the encryption key is bound to
   a specific user, it cannot be used by another context.  The Operating
   System (or an agent) in the user's device can request a token, and
   grant it to specific applications based on a user's request.  Users
   can revoke access by telling an operator to blacklist the nti
   associated with this token.

   Besides accessing a low-latency service, this token serves two
   requirements: * it is application agnostic and can be used for any
   application a user wants * it preserves privacy.  There is no
   indication about specific applications, and no identifier that can be
   linked to a user.

7.  Network Tokens and Encapsulating protocols

   Network tokens are inserted in existing protocols by leveraging
   extension capabilities and do not require a dedicated header.  The
   contents of the token are largely opaque to the protocol that carries
   them (i.e., they cannot read or verify a token).

   To support tokens, a protocol needs to allow its users to specify the
   token to be used (e.g., while opening a socket or configuring a
   connection), and appropriately reflect a token according to the value
   of a token's Reflect Type.

   While tokens are designed to be self-contained, the protocols that
   carry them inevitably affect its use.  In particular:

   o  the maximum size of tokens is dictated by the provision of the
      protocol extension that carries them.

   o  Protocols that use a checksum over transmitted data (like TLS or
      optionally STUN) ensure that a token cannot be tampered or removed
      by intermediary nodes

   o  Implementations should also consider whether the protocol
      guarantees that a token is contained in a single packet or might
      be carried over multiple packets.

   This section discusses the use of tokens in three widely used
   protocols, and section {#iana} describes recommended IANA changes for
   each protocol.

   For the examples below we will use the following 227-byte long
   network token, which encodes (in hex notation) the low-latency token
   described in Section {#lowlatencytoken}.





Yiakoumis               Expires October 15, 2020                [Page 9]

Internet-Draft                networktokens                   April 2020


10000001 # Network token is represented as JWT, reflect at node
65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d6a553251304a444c556
8544e544579496e302e2e565f4278546d4e692d6b6337735a376b504e514851412e5a42764269
6d6d46705579555165e544579634b36244566a31378546d4e692d6b6337735a376b50476676c4
7597579666f734b43565234744576306a4d31735f4352484c50706a6335536d37703336487576
677541467c7979396f3a526e7976532484cd37703336487553559797170e514851412e5a42764
2696d6d4670557955516576676c47597579666f734b43565234744576306a4d31716535597971
702d5946796838566a396f72337a7351624e6d4e6475796974727658436854766c66633055704
4545597d429869d34e5486a63963305f6a5267424f39745a6e4535438566a396fe64757969747
27658766c6655704417e252636f267349565f36d585a6e4547568f7672637835f4352484c5417
72e32556e32636a6f6a5267424f396349565f7869536d586357745a6e4535495475684973456a
4f76726378472e3f9 # Network token payload (as JWE)

7.1.  Network Tokens as a TLS Extension

   Network tokens can be encoded as TLS extensions during the handshake
   phase in ClientHello, ServerHello, and HelloRetryRequest messages, as
   these are defined in [RFC8446].  As the handshake happens before
   encryption is established between the two communicating endpoints,
   the token will be sent unchanged and can be interpreted by any
   trusted networks.

   Network tokens used as TLS extension are flow-specific, i.e., the
   network should apply the policy linked to this token to all packets
   that belong to this flow.

   The token comprises the extension data.  Section {#iana} requests the
   value 57 as a Network Token extension type.  For TLS backward
   compatibility, the first 16-bit after the extension type should
   encode the length of the extension data.  The following bytestream
   defines the extension, including type and lengh data:

3900e3  # Network Token Extension with 227 bytes length
1000001 # Network token is represented as JWT, reflect at node
65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d6a553251304a444c556
8544e544579496e302e2e565f4278546d4e692d6b6337735a376b504e514851412e5a42764269
6d6d46705579555165e544579634b36244566a31378546d4e692d6b6337735a376b50476676c4
7597579666f734b43565234744576306a4d31735f4352484c50706a6335536d37703336487576
677541467c7979396f3a526e7976532484cd37703336487553559797170e514851412e5a42764
2696d6d4670557955516576676c47597579666f734b43565234744576306a4d31716535597971
702d5946796838566a396f72337a7351624e6d4e6475796974727658436854766c66633055704
4545597d429869d34e5486a63963305f6a5267424f39745a6e4535438566a396fe64757969747
27658766c6655704417e252636f267349565f36d585a6e4547568f7672637835f4352484c5417
72e32556e32636a6f6a5267424f396349565f7869536d586357745a6e4535495475684973456a
4f76726378472e3f9 # Network token payload (as JWE)

   If the reflect type is set to 0, the peer takes no additional step.
   If reflect type is 0x1, the peer should attach a Network Token



Yiakoumis               Expires October 15, 2020               [Page 10]

Internet-Draft                networktokens                   April 2020


   request at the ServerHello message, set the type to 0x2, and copy the
   rest of the token in it.  The extension data for the ServerHello
   message that reflects the token mentioned above is listed below.

3900e3  # Network Token Extension with 227 bytes length
2000001 # Network token is represented as JWT, reflected token
65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d6a553251304a444c556
8544e544579496e302e2e565f4278546d4e692d6b6337735a376b504e514851412e5a42764269
6d6d46705579555165e544579634b36244566a31378546d4e692d6b6337735a376b50476676c4
7597579666f734b43565234744576306a4d31735f4352484c50706a6335536d37703336487576
677541467c7979396f3a526e7976532484cd37703336487553559797170e514851412e5a42764
2696d6d4670557955516576676c47597579666f734b43565234744576306a4d31716535597971
702d5946796838566a396f72337a7351624e6d4e6475796974727658436854766c66633055704
4545597d429869d34e5486a63963305f6a5267424f39745a6e4535438566a396fe64757969747
27658766c6655704417e252636f267349565f36d585a6e4547568f7672637835f4352484c5417
72e32556e32636a6f6a5267424f396349565f7869536d586357745a6e4535495475684973456a
4f76726378472e3f9 # Network token payload (as JWE)

   TLS does not allow for extensions to be originated by the server if
   they are not defined in the ClientHello message.  To account for
   cases where tokens need to be inserted by the server, the client
   might send an empty Network Token extension which allows the server
   to respond to with the appropriate token.  Alternatively, the server
   can use a HelloRequestRetry message to ask the peer to re-send a
   ClientHello message with the NetworkToken extension included.  The
   HelloRequestRetry should include the token.  Depending on the reflect
   type the client peer might include an empty or populated Network
   Token extension on the subsequent ClientHello message.

   The use of Network Token between ClientHello, ServerHello, and
   HelloRequestRetry messages resembles the mechanics of the cookie TLS
   extension.

   The TLS handshake is protected for message integrity, and as such
   guarantees that network tokens cannot be dropped by intermediary
   nodes.

7.2.  Network Tokens as a STUN Attribute

   Network tokens can be inserted as attributes in STUN Binding Request
   and Binding Response messages, during the handshake that preceeds
   WebRTC realtime communication flows [RFC5389].

   Network tokens used as STUN attributes are flow-specific, i.e., the
   network should apply the policy linked to this token to all packets
   that belong to this flow.





Yiakoumis               Expires October 15, 2020               [Page 11]

Internet-Draft                networktokens                   April 2020


   The token comprises the attribute data.  Section {#iana} requests the
   value 0x001F as a Network Token STUN attribute.  The following
   bytestream shows the attribute for the low-latency token described
   earlier, including attribute type and length.

   (TODO: We need to deal with padding here as STUN requires 32-bit
   boundaries.)

001F00e3  # Network Token Attribute with 227 bytes length
1000001 # Network token is represented as JWT, reflect at node
65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d6a553251304a444c556
8544e544579496e302e2e565f4278546d4e692d6b6337735a376b504e514851412e5a42764269
6d6d46705579555165e544579634b36244566a31378546d4e692d6b6337735a376b50476676c4
7597579666f734b43565234744576306a4d31735f4352484c50706a6335536d37703336487576
677541467c7979396f3a526e7976532484cd37703336487553559797170e514851412e5a42764
2696d6d4670557955516576676c47597579666f734b43565234744576306a4d31716535597971
702d5946796838566a396f72337a7351624e6d4e6475796974727658436854766c66633055704
4545597d429869d34e5486a63963305f6a5267424f39745a6e4535438566a396fe64757969747
27658766c6655704417e252636f267349565f36d585a6e4547568f7672637835f4352484c5417
72e32556e32636a6f6a5267424f396349565f7869536d586357745a6e4535495475684973456a
4f76726378472e3f9 # Network token payload (as JWE)

   If the reflect type is set to 0, the peer takes no additional step.
   If reflect type is 0x1, the peer should attach a Network Token
   request at the Binding Response message, set the type to 0x2, and
   copy the rest of the token in it.  The attribute data for the Binding
   Response message that reflects the token mentioned above is listed
   below.

001F00e3  # Network Token Extension with 227 bytes length
2000001 # Network token is represented as JWT, reflected token
65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d6a553251304a444c556
8544e544579496e302e2e565f4278546d4e692d6b6337735a376b504e514851412e5a42764269
6d6d46705579555165e544579634b36244566a31378546d4e692d6b6337735a376b50476676c4
7597579666f734b43565234744576306a4d31735f4352484c50706a6335536d37703336487576
677541467c7979396f3a526e7976532484cd37703336487553559797170e514851412e5a42764
2696d6d4670557955516576676c47597579666f734b43565234744576306a4d31716535597971
702d5946796838566a396f72337a7351624e6d4e6475796974727658436854766c66633055704
4545597d429869d34e5486a63963305f6a5267424f39745a6e4535438566a396fe64757969747
27658766c6655704417e252636f267349565f36d585a6e4547568f7672637835f4352484c5417
72e32556e32636a6f6a5267424f396349565f7869536d586357745a6e4535495475684973456a
4f76726378472e3f9 # Network token payload (as JWE)

   STUN messages can be protected for message integrity, and as such
   they can guarantee that network tokens cannot be dropped by
   intermediary nodes.





Yiakoumis               Expires October 15, 2020               [Page 12]

Internet-Draft                networktokens                   April 2020


7.3.  Network Tokens as an IPv6 Hop-by-Hop Extension Header

   Network tokens can be inserted as an IPv6 Hop-by-Hop Extension
   header, as defined in Section 4 of [RFC8200].

   Network tokens used as IPv6 extension headers can be either flow or
   packet specific.  The expectation must be defined by the network
   service itself, and the endpoints can decide to which packets to
   insert a token.  For example, they can insert a token at every packet
   of a specific flow, every few seconds, or only at the first packet of
   a flow.  The network should accordingly implement the policy.

   When tokens are attached to all packets of a flow, it is important to
   keep the length of the token small, to avoid overhead.  It is
   therefore recommended that in such cases implementations consider
   representation formats that can minimize the overall length of a
   token.  Size-efficient representation formats are out-of-scope for
   this document.

   The token comprises the IPv6 extension header data.  Section {#iana}
   requests the value 0x1F as a Network Token Extension Header.  The
   following bytestream shows the header for the low-latency token
   described earlier, including option type and length (in 8-octet
   units).

1f1d  # Network Token Hop-by-Hop option with 29 8-octet length
1000001 # Network token is represented as JWT, reflect at node
65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d6a553251304a444c556
8544e544579496e302e2e565f4278546d4e692d6b6337735a376b504e514851412e5a42764269
6d6d46705579555165e544579634b36244566a31378546d4e692d6b6337735a376b50476676c4
7597579666f734b43565234744576306a4d31735f4352484c50706a6335536d37703336487576
677541467c7979396f3a526e7976532484cd37703336487553559797170e514851412e5a42764
2696d6d4670557955516576676c47597579666f734b43565234744576306a4d31716535597971
702d5946796838566a396f72337a7351624e6d4e6475796974727658436854766c66633055704
4545597d429869d34e5486a63963305f6a5267424f39745a6e4535438566a396fe64757969747
27658766c6655704417e252636f267349565f36d585a6e4547568f7672637835f4352484c5417
72e32556e32636a6f6a5267424f396349565f7869536d586357745a6e4535495475684973456a
4f76726378472e3f9 # Network token payload (as JWE)

   If the reflect type is set to 0, the peer takes no additional step.
   If reflect type is 0x1, the peer should attach the Network Token Hop-
   by-hop option for messages in the reverse direction for this flow,
   set the type to 0x2, and copy the rest of the token in it.  The data
   for the Hop-By-Hop option that reflects the token mentioned above is
   listed below.






Yiakoumis               Expires October 15, 2020               [Page 13]

Internet-Draft                networktokens                   April 2020


1f1d  # Network Token Hop-by-Hop option with 29-octet bytes length
2000001 # Network token is represented as JWT, reflected token
65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d6a553251304a444c556
8544e544579496e302e2e565f4278546d4e692d6b6337735a376b504e514851412e5a42764269
6d6d46705579555165e544579634b36244566a31378546d4e692d6b6337735a376b50476676c4
7597579666f734b43565234744576306a4d31735f4352484c50706a6335536d37703336487576
677541467c7979396f3a526e7976532484cd37703336487553559797170e514851412e5a42764
2696d6d4670557955516576676c47597579666f734b43565234744576306a4d31716535597971
702d5946796838566a396f72337a7351624e6d4e6475796974727658436854766c66633055704
4545597d429869d34e5486a63963305f6a5267424f39745a6e4535438566a396fe64757969747
27658766c6655704417e252636f267349565f36d585a6e4547568f7672637835f4352484c5417
72e32556e32636a6f6a5267424f396349565f7869536d586357745a6e4535495475684973456a
4f76726378472e3f9 # Network token payload (as JWE)

   TODO (YY): There is no clear way currently for peers to understand
   how to reflect tokens (per-packet, per-flow, and when).  If this is
   understood by the context of the token the peer will need to be aware
   of the token, which is undesired.  The token should have all
   information regarding reflection.  We have to see whether the current
   two-bits can clarify this, or whether we need to make reflection part
   of the protocol-specific part and not the token itself.

8.  Implementation Considerations

   Network token applications (and their implementations) must decide
   the contents of the token, what protocol to insert them to, whether
   tokens are per-packet or per-flow, and whether they need to be
   reflected by peers on the reverse flow.  This section discusses
   common consideration.

8.1.  Network Token contents

   When deciding the contents of a token, applications should take
   effort to include only the necessary information and keep the size of
   the token small.  They should also take into consideration the trust
   relationships between different stakeholders (i.e., the network
   operator, the application provider, the operating system, the end
   user) and pick the right encryption and signing properties.  Another
   element to consider is potential abuse scenarios and how to prevent
   token replays and protect from malicious users, given assumptions
   around the network architecture.  For example, to prevent use of a
   user-specific token by a another user, a token might be bound to a
   user identifier that the network can separately verify while
   processing packets and tokens (e.g., a well-defined IP address or an
   IMSI in case of a cellular network).






Yiakoumis               Expires October 15, 2020               [Page 14]

Internet-Draft                networktokens                   April 2020


8.2.  Network Token protocol

   This specification describes three protocols where tokens might be
   inserted, and it is expected that this list will grow

   IPv6 tokens sit at the narrow waist, can be applied to any traffic,
   and support both per-packet and per-flow granularity.  IPv6 tokens
   require OS support for any practical usecase.  The downside of IPv6
   tokens is that IPv6 adoption is still limited, and many networks drop
   packets with IPv6 extension headers with rates described in
   [RFC7872].

   TLS tokens are limited to TLS/DTLS sessions, and can only be used at
   a flow granularity.  Implementation does not depend on the OS, but
   rather at the cryptographic library used (e.g., BoringSSL or
   OpenSSL).  As TLS handshake is integrity-protected, intermediate
   nodes cannot drop or alter a token.

   STUN tokens are targeted to real-time communications, and can only be
   used at a flow granularity.  Implementation does not depend on the
   OS, but rather at the library that initiates the related flows (e.g.,
   WebRTC).  As STUN messages are integrity-protected, intermediate
   nodes cannot drop or alter a token.

   The primary reason for making network tokens protocol agnostic is to
   ease adoption and enable interested parties (Operating System,
   application providers, users, network vendors and operators) to use
   them in a way that better fits the intended usecase.  The protocol to
   use will largely depend on the parties involved in a usecase, the
   availability of tokens in different protocols, and the capability of
   endpoints and the network to insert and interpret tokens.

   When possible, networks should make efforts to accept tokens in
   different protocols to allow further adoption from endpoints.  As
   processing of tokens remains the same independent of the protocol
   that carries them, the main overhead from detecting tokens in
   multiple protocols will come from parsing and detecting tokens in
   different parts of the header.

8.3.  Network Token granularity

   The granularity of a token is either per-packet or per-flow and is
   interconnected with the protocol where tokens are inserted.  The
   trade-offs for each option are discussed below.







Yiakoumis               Expires October 15, 2020               [Page 15]

Internet-Draft                networktokens                   April 2020


8.3.1.  Per-packet granularity

   Per-packet granularity allows stateless processing from network nodes
   and the capability to pinpoint the exact packets for traffic
   differentiation (e.g., for flows that combine multple types of
   traffic).  Moreover, it preserves policy if the flow of interest gets
   rerouted.

   On the other hand, per-packet granularity limits potential
   encapsulating protocols.  From the protocols described in this
   specification only IPv6 allows per-packet granularity,

   Per-packet granularity implies that all packet processing will
   involve cryptographic functions which might be expensive (or
   unavailable).  Finally, the size of the token should be small as it
   will add overhead to all packets.

8.3.2.  Per-flow granularity

   Tokens with per-flow granularity can be inserted in multiple
   protocols.  As the token is sent only once per flow, its size is less
   important compared to per-packet tokens.  Limiting crypto to one
   packet per flow reduces the packet processing overhead, and allows
   implementations that combine a fast path (with no crypto support)
   with a slow, crypto-enabled path.

   The main disadvantage of per-flow granularity is that it requires
   per-flow state.  As policy enforcement depends on this state, per-
   flow granularity also requires that all packets of this flow will get
   routed through this node.

8.4.  Token to DiffServ mapping and reflection

   Tokens might be interpreted one or more times within a network.

   In many cases, a single interpretation will be enough.  One example
   is network policies that are enforced at a single point and involve
   per-flow state (like zero-rating).  In such scenarios, token
   interpretation and policy enforcement can take place all in once.
   Alternatively, when policy enforcement involves mutliple nodes (e.g.,
   a low-latency service that spans the wired and radio network),
   network owners can use existing mechanisms (like DiffServ, QCI tags,
   or reflective QoS) to enforce the policy across multiple nodes within
   the same network domain.

   In cases where a reverse flow might get routed through a different
   path, token reflection should be used.




Yiakoumis               Expires October 15, 2020               [Page 16]

Internet-Draft                networktokens                   April 2020


9.  Security Considerations

   As any cryptographic application, it is important for users of
   network token applications to protect asymmetric private and
   symmetric secret keys, and employ countermeasures to various attacks.

   The security of network tokens relies upon on the protections offered
   by the underlying signing and encryption technologies.  It is
   therefore recommended that implementations of network tokens use
   existing and well-understood cryptographic frameworks (like JOSE and
   COSE) to protect tokens, or careful consider security implications if
   they provide their own format.

   While tokens are integrity protected, an intermediary node can in
   theory replace or remove a token.  Protection against this can be
   provided by additional integrity protection from the encapsulating
   protocol itself, as is the case with TLS handshakes and STUN.

   Network tokens may require processing in software, as current
   hardware platforms do not support cryptographic capabilities.  This
   might impose a security risk and exposure to an attack, as traffic
   could be diverted towards the slow path, and in return degrade the
   overall performance of a node.  It is recommended that
   implementations adequately account for such scenarios, either by
   setting a rate-limit to packets that go through a slow path or
   ensuring that the overall functionality is not affected.

10.  IANA Considerations { #iana }

10.1.  Token Descriptor ID Registry

   This section establishes the IANA "Network Token Descriptor ID"
   registry for token descriptors.  The registry records the descriptor
   ID and a reference to the specification that defines it.

   Values are registered on a Specification Required [RFC5226] basis
   after a three-week review period, on the advice of one or more
   Designated Experts.  However, to allow for the allocation of values
   prior to publication, the Designated Experts may approve registration
   once they are satisfied that such a specification will be published.

   Within the review period, the Designated Experts will either approve
   or deny the registration request, communicating this decision to the
   review list and IANA.  Denials should include an explanation and, if
   applicable, suggestions as to how to make the request successful.

   Criteria that should be applied by the Designated Experts includes
   determining whether the proposed registration duplicates existing



Yiakoumis               Expires October 15, 2020               [Page 17]

Internet-Draft                networktokens                   April 2020


   functionality, whether it is likely to be of general applicability or
   whether it is useful only for a single application, and whether the
   registration description is clear.

10.1.1.  Initial Registry Contents

   o  Token Descriptor ID: 0x1

   o  Description: Token is represented as a JSON Web Token

   o  Specificaton Document(s): This document.

   o  Token Descriptor ID: 0x2

   o  Description: Token is represented as a Concise Binary
      Representation Object

   o  Specification Document(s): This document

10.2.  IPv6 Hop-By-Hop options registration

   This section registers the value 0x0F as a IPv6 Hop-By-Hop and
   Destination Option for network tokens.

   o  Hex Value: 0x1F

   o  Binary Value: 0x00011111

   o  Description: Network Token

   o  Reference: This document

10.3.  TLS ExtensionType Registry

   This section registers the value 57 as a TLS Extension Type for
   network tokens.

   o  Value: 57

   o  Description: Network Token

   o  Reference: This document

10.4.  STUN Attributes Registry

   This section registers the value 0x001F as a STUN attribute for
   network tokens.




Yiakoumis               Expires October 15, 2020               [Page 18]

Internet-Draft                networktokens                   April 2020


   o  Value: 0x001F

   o  Description: Network Token

   o  Reference: This document

11.  References

11.1.  Normative References

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", RFC 5226,
              DOI 10.17487/RFC5226, May 2008,
              <https://www.rfc-editor.org/info/rfc5226>.

   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,
              "Session Traversal Utilities for NAT (STUN)", RFC 5389,
              DOI 10.17487/RFC5389, October 2008,
              <https://www.rfc-editor.org/info/rfc5389>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <https://www.rfc-editor.org/info/rfc7515>.

   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, DOI 10.17487/RFC7516, May 2015,
              <https://www.rfc-editor.org/info/rfc7516>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/info/rfc7519>.

   [RFC7872]  Gont, F., Linkova, J., Chown, T., and W. Liu,
              "Observations on the Dropping of Packets with IPv6
              Extension Headers in the Real World", RFC 7872,
              DOI 10.17487/RFC7872, June 2016,
              <https://www.rfc-editor.org/info/rfc7872>.

   [RFC8200]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", STD 86, RFC 8200,
              DOI 10.17487/RFC8200, July 2017,
              <https://www.rfc-editor.org/info/rfc8200>.

   [RFC8392]  Jones, M., Wahlstroem, E., Erdtman, S., and H. Tschofenig,
              "CBOR Web Token (CWT)", RFC 8392, DOI 10.17487/RFC8392,
              May 2018, <https://www.rfc-editor.org/info/rfc8392>.





Yiakoumis               Expires October 15, 2020               [Page 19]

Internet-Draft                networktokens                   April 2020


   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

11.2.  Informative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

Author's Address

   Yiannis Yiakoumis
   Selfie Networks, Inc

   Email: yiannis@selfienetworks.com


































Yiakoumis               Expires October 15, 2020               [Page 20]
